# -*- mode: ruby -*-
# vi: set ft=ruby :

# Require for create disks
require "fileutils"

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# INSTALL PLUGINS
required_plugins = ["vagrant-vmware-desktop", "vagrant-reload", "vagrant-vbguest", "vagrant-disksize"]
required_plugins.each do |plugin|
  unless Vagrant.has_plugin?(plugin)
    system "vagrant plugin install #{plugin}"
    puts "Installed the #{plugin} plugin."
  end
end

# GLOBAL BOX CONFIGURATIONS
BOX_DNS = "silvestrini-rocky9-dns"
BOX_LB = "silvestrini-rocky9-lb"
BOX_CP = "silvestrini-rocky9-cp"
BOX_WK = "silvestrini-rocky9-wk"

# GLOBAL VARIABLES
VDISKMANAGER = "E:\\Apps\\VMWare\\vmware-vdiskmanager.exe"

#DEFINE VM
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # GLOBAL CONFIGURATIONS

  ## SSH CONFIG
  #config.ssh.insert_key = false

  ## Boot timeout
  config.vm.boot_timeout = 600

  ## GUEST CONFIG
  config.vm.box_download_insecure = true

  ## MOUNTS
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder "../../security/", "/home/vagrant/security"
  config.vm.synced_folder "../../configs/linux/", "/home/vagrant/configs"
  config.vm.synced_folder "../../scripts/linux/", "/home/vagrant/scripts"
  config.vm.synced_folder "../../api/", "/home/vagrant/api"
  config.vm.synced_folder "../../kubernetes", "/home/vagrant/kubernetes"
  config.vm.synced_folder "../../apps", "/home/vagrant/apps"
  config.vm.synced_folder "../../charts", "/home/vagrant/charts"

  # VM infra-server01 - DNS Bind, Postfix,Samba, NFS, Pure-FTP
  config.vm.define "infra-server01" do |infra_server01|
    # DEFINE BOX
    infra_server01.vm.box = BOX_DNS

    # LOCAL VARIABLES
    INFRA_VM_NAME = "infra-server01"

    ## TRIGGER FOR CREATE ADDITIONAL DISKS - vagrant up
    infra_server01.trigger.before :up do |trigger|
      trigger.name = "Create additional disks"
      trigger.ruby do |env, machine|
        INFRA_VAGRANT_STORAGE = "E:\\Servers\\VMWare\\Storage\\#{INFRA_VM_NAME}"
        INFRA_ADDITIONAL_DISKS = [
          { filename: "#{INFRA_VM_NAME}-disk1.vmdk", size_gb: 100 },
        ]
        dir = INFRA_VAGRANT_STORAGE
        unless File.directory?(dir)
          FileUtils.mkdir_p dir
        end
        INFRA_ADDITIONAL_DISKS.each do |disk|
          file_to_disk = "#{dir}/#{disk[:filename]}"
          unless File.exist?(file_to_disk)
            `#{VDISKMANAGER} -c -s #{disk[:size_gb]}GB -a lsilogic -t 1 #{file_to_disk}`
          end
          machine.provider_config.vmx["scsi0:1.filename"] = file_to_disk
          machine.provider_config.vmx["scsi0:1.present"] = "TRUE"
          machine.provider_config.vmx["scsi0:1.redo"] = ""
        end
      end
    end

    # HOSTNAME
    infra_server01.vm.hostname = INFRA_VM_NAME

    # NETWORK
    infra_server01.vm.network "public_network", ip: "192.168.0.130", netmask: "255.255.255.0", mode: "bridge", bridge: [
                                                  "Intel(R) I211 Gigabit Network Connection",
                                                  "MediaTek Wi-Fi 6 MT7921 Wireless LAN",
                                                ]

    # PROVIDER
    infra_server01.vm.provider "vmware_desktop" do |vm|
      vm.vmx["virtualHW.version"] = "10"
      vm.linked_clone = true
      vm.whitelist_verified = true
      vm.vmx["allowNested"] = "true"
      vm.utility_certificate_path = "C:\\ProgramData\\HashiCorp\\vagrant-vmware-desktop\\certificates"
      vm.clone_directory = "E:\\Servers\\VMWare\\#{INFRA_VM_NAME}"
      vm.vmx["displayName"] = INFRA_VM_NAME
      vm.vmx["memsize"] = "2048"
      vm.vmx["numvcpus"] = "1"
      vm.vmx["cpuid.coresPerSocket"] = "1"
      #vm.gui = true
    end

    # SSH,FIREWALLD,SELINUX, UPDATES AND PROFILE
    infra_server01.vm.provision "shell", name: "[SCRIPT: scripts/linux/commons/userdata-ol9.sh]", path: "../../scripts/linux/commons/userdata-ol9.sh"

    # SET DNS BIND
    infra_server01.vm.provision "shell", name: "[SCRIPT: scripts/linux/bind/userdata-bind-master.sh]", path: "../../scripts/linux/bind/userdata-bind-master.sh"

    # INSTALL SALT MASTER AND MINIONS
    infra_server01.vm.provision "shell", name: "[SCRIPT: scripts/linux/salt/install.sh]", path: "../../scripts/linux/salt/install.sh"

    # SET ISC DHCP
    #infra_server01.vm.provision "shell", name: "[SCRIPT USERDATA-DHCP.SH]", path: "../../scripts/linux/dhcp/userdata-dhcp.sh"

    # CONFIGURE STORAGE NFS
    #infra_server01.vm.provision "shell", name: "[SCRIPT STORAGE.SH]", path: "../../scripts/linux/commons/storage-nfs.sh"

    # CLEAR STORAGE FILES - vagrant destroy
    infra_server01.trigger.after :destroy do |trigger|
      trigger.name = "Cleanup additional disks and storage directory"
      trigger.ruby do |env, machine|
        dir = INFRA_VAGRANT_STORAGE
        additional_disk_files = INFRA_ADDITIONAL_DISKS.map { |disk| "#{dir}/#{disk[:filename].split("-")[0]}" }
        if Dir.exist?(dir) && (Dir.entries(dir) - [".", ".."] - additional_disk_files).empty?
          Dir.rmdir(dir)
        else
          FileUtils.rm_rf(dir)
        end
      end
    end
  end

  # VM load_balancer - racher.skynet.com.br
  config.vm.define "load-balance" do |load_balance|
    load_balance.vm.box = BOX_LB

    # VARIABLE HOSTNAME
    VM_LOAD_BALANCE = "load-balance"

    # HOSTNAM
    load_balance.vm.hostname = VM_LOAD_BALANCE

    # NETWORK
    load_balance.vm.network "public_network", ip: "192.168.0.131", netmask: "255.255.255.0", mode: "bridge", bridge: [
                                                "Intel(R) I211 Gigabit Network Connection",
                                                "MediaTek Wi-Fi 6 MT7921 Wireless LAN",
                                              ]

    # PROVIDER
    load_balance.vm.provider "vmware_desktop" do |vm|
      vm.vmx["virtualHW.version"] = "10"
      vm.linked_clone = true
      vm.whitelist_verified = true
      vm.vmx["allowNested"] = "true"
      vm.utility_certificate_path = "C:\\ProgramData\\HashiCorp\\vagrant-vmware-desktop\\certificates"
      vm.clone_directory = "E:\\Servers\\VMWare\\#{VM_LOAD_BALANCE}"
      vm.vmx["displayName"] = VM_LOAD_BALANCE
      vm.vmx["memsize"] = "2048"
      vm.vmx["numvcpus"] = "1"
      vm.vmx["cpuid.coresPerSocket"] = "1"
      #vm.gui = true
    end

    # SSH,FIREWALLD,SELINUX, UPDATES AND PROFILE
    load_balance.vm.provision "shell", name: "[SCRIPT: /scripts/linux/commons/userdata-ol9.sh]", path: "../../scripts/linux/commons/userdata-ol9.sh"

    # CONFIGURE NGINX LOAD BALANCE
    load_balance.vm.provision "shell", name: "[SCRIPT GENERATE-CERTIFICATES.SH]", path: "../../scripts/linux/commons/generate-certificates.sh"

    # CONFIGURE NGINX LOAD BALANCE
    load_balance.vm.provision "shell", name: "[SCRIPT USERDATA-LOAD-BALANCE.SH]", path: "../../scripts/linux/load-balance/userdata-load-balance.sh"

    # INSTALL SALT MASTER AND MINIONS
    load_balance.vm.provision "shell", name: "[SCRIPT INSTALL.SH]", path: "../../scripts/linux/salt/install.sh"

    # UP API UPDATE NGINX CONFIG
    load_balance.vm.provision "shell", name: "[SCRIPT START-API-UPDATE-NGINX-CONFIG.SH]", path: "../../scripts/linux/load-balance/start-api-update-nginx-config.sh"
  end

  # Node|Control Plane Servers
  PLANES = ["control-plane01", "control-plane02", "control-plane03"]
  N = 2

  (0..N).each do |i|
    config.vm.define PLANES[i] do |node|

      # BOX NAME
      node.vm.box = BOX_CP

      # VARIABLE HOSTNAME
      node.vm.hostname = PLANES[i]

      # NETWORK
      node.vm.network "public_network", ip: "192.168.0.14#{i}", netmask: "255.255.255.0", mode: "bridge", bridge: [
                                          "Intel(R) I211 Gigabit Network Connection",
                                          "MediaTek Wi-Fi 6 MT7921 Wireless LAN",
                                        ]

      #PROVIDER
      node.vm.provider "vmware_desktop" do |vm|
        vm.vmx["virtualHW.version"] = "10"
        vm.linked_clone = true
        vm.whitelist_verified = true
        vm.vmx["allowNested"] = "true"
        vm.utility_certificate_path = "C:\\ProgramData\\HashiCorp\\vagrant-vmware-desktop\\certificates"
        vm.clone_directory = "E:\\Servers\\VMWare\\#{PLANES[i]}"
        vm.vmx["displayName"] = PLANES[i]
        vm.vmx["memsize"] = "8192"
        vm.vmx["numvcpus"] = "2"
        vm.vmx["cpuid.coresPerSocket"] = "1"
        #vm.gui = true
      end

      # SSH,FIREWALLD,SELINUX, UPDATES AND PROFILE
      node.vm.provision "shell", name: "[SCRIPT: scripts/linux/commons/userdata-ol9.sh]", path: "../../scripts/linux/commons/userdata-ol9.sh"

      # INSTALL SALT MASTER AND MINIONS
      node.vm.provision "shell", name: "[SCRIPT: scripts/linux/salt/install.sh]", path: "../../scripts/linux/salt/install.sh"

      # INSTALL RKE2
      node.vm.provision "shell", name: "[SCRIPT: scripts/linux/k8s/install-rke2.sh]", path: "../../scripts/linux/k8s/install-rke2.sh"
    end
  end

  # Agent|Workers Servers
  WORKERS = ["worker01", "worker02", "worker03"]
  M = 2
  iprange = 3

  (0..M).each do |j|
    config.vm.define WORKERS[j] do |node|

      # BOX NAME
      node.vm.box = BOX_WK

      ## VARIABLE HOSTNAME
      node.vm.hostname = WORKERS[j]

      ## TRIGGER FOR CREATE ADDITIONAL DISKS - vagrant up
      node.trigger.before :up do |trigger|
        trigger.name = "Create additional disks"
        trigger.ruby do |env, machine|
          WK_VAGRANT_STORAGE = "E:\\Servers\\VMWare\\Storage\\#{WORKERS[j]}"
          WK_ADDITIONAL_DISKS = [
            { filename: "#{WORKERS[j]}-disk1.vmdk", size_gb: 200 },
          ]
          dir = WK_VAGRANT_STORAGE
          unless File.directory?(dir)
            FileUtils.mkdir_p dir
          end
          WK_ADDITIONAL_DISKS.each do |disk|
            file_to_disk = "#{dir}/#{disk[:filename]}"
            unless File.exist?(file_to_disk)
              `#{VDISKMANAGER} -c -s #{disk[:size_gb]}GB -a lsilogic -t 1 #{file_to_disk}`
            end
            machine.provider_config.vmx["scsi0:1.filename"] = file_to_disk
            machine.provider_config.vmx["scsi0:1.present"] = "TRUE"
            machine.provider_config.vmx["scsi0:1.redo"] = ""
          end
        end
      end
      # END TRIGGER UP

      # NETWORK
      node.vm.network "public_network", ip: "192.168.0.14#{iprange}", netmask: "255.255.255.0", mode: "bridge", bridge: [
                                          "Intel(R) I211 Gigabit Network Connection",
                                          "MediaTek Wi-Fi 6 MT7921 Wireless LAN",
                                        ]
      iprange += 1

      #PROVIDER
      node.vm.provider "vmware_desktop" do |vm|
        vm.vmx["virtualHW.version"] = "10"
        vm.linked_clone = true
        vm.whitelist_verified = true
        vm.vmx["allowNested"] = "true"
        vm.utility_certificate_path = "C:\\ProgramData\\HashiCorp\\vagrant-vmware-desktop\\certificates"
        vm.clone_directory = "E:\\Servers\\VMWare\\#{WORKERS[j]}"
        vm.vmx["displayName"] = WORKERS[j]
        vm.vmx["memsize"] = "16000"
        vm.vmx["numvcpus"] = "4"
        vm.vmx["cpuid.coresPerSocket"] = "1"
        #vm.gui = true
      end

      # SSH,FIREWALLD,SELINUX, UPDATES AND PROFILE
      node.vm.provision "shell", name: "[SCRIPT: scripts/linux/commons/userdata-ol9.sh]", path: "../../scripts/linux/commons/userdata-ol9.sh"

      # INSTALL SALT MASTER AND MINIONS
      node.vm.provision "shell", name: "[SCRIPT: scripts/linux/salt/install.sh]", path: "../../scripts/linux/salt/install.sh"

      # CONFIGURE STORAGE
      node.vm.provision "shell", name: "[SCRIPT: scripts/linux/commons/storage-longhorn.sh]", path: "../../scripts/linux/commons/storage-longhorn.sh"

      # INSTAL RKE2 AGENT
      node.vm.provision "shell", name: "[SCRIPT: scripts/linux/k8s/install-rke2.sh]", path: "../../scripts/linux/k8s/install-rke2.sh"

      if WORKERS[j] == "worker03"
        node.vm.provision "shell", name: "[SCRIPT: scripts/linux/k8s/remote-deployments.sh]", path: "../../scripts/linux/k8s/remote-deployments.sh"
      end

      # CLEAR STORAGE FILES - vagrant destroy
      node.trigger.after :destroy do |trigger|
        trigger.name = "Cleanup additional disks and storage directory"
        trigger.ruby do |env, machine|
          dir = WK_VAGRANT_STORAGE
          additional_disk_files = WK_ADDITIONAL_DISKS.map { |disk| "#{dir}/#{disk[:filename].split("-")[0]}" }
          if Dir.exist?(dir) && (Dir.entries(dir) - [".", ".."] - additional_disk_files).empty?
            Dir.rmdir(dir)
          else
            FileUtils.rm_rf(dir)
          end
        end
      end
      # END TRIGGER DESTROY
    end
  end

  # VM managment - managment.skynet.com.br
  config.vm.define "managment" do |managment|
    managment.vm.box = "silvestrini-rocky9"

    # VARIABLE HOSTNAME
    VM_MANAGMENT = "managment"

    # HOSTNAM
    managment.vm.hostname = VM_MANAGMENT

    # NETWORK
    managment.vm.network "public_network", ip: "192.168.0.132", netmask: "255.255.255.0", mode: "bridge", bridge: [
                                             "Intel(R) I211 Gigabit Network Connection",
                                             "MediaTek Wi-Fi 6 MT7921 Wireless LAN",
                                           ]

    # PROVIDER
    managment.vm.provider "vmware_desktop" do |vm|
      vm.vmx["virtualHW.version"] = "10"
      vm.linked_clone = true
      vm.whitelist_verified = true
      vm.vmx["allowNested"] = "true"
      vm.utility_certificate_path = "C:\\ProgramData\\HashiCorp\\vagrant-vmware-desktop\\certificates"
      vm.clone_directory = "E:\\Servers\\VMWare\\#{VM_MANAGMENT}"
      vm.vmx["displayName"] = VM_MANAGMENT
      vm.vmx["memsize"] = "1024"
      vm.vmx["numvcpus"] = "1"
      vm.vmx["cpuid.coresPerSocket"] = "1"
      #vm.gui = true
    end

    # SSH,FIREWALLD,SELINUX, UPDATES AND PROFILE
    managment.vm.provision "shell", name: "[SCRIPT: scripts/linux/commons/userdata-ol9.sh]", path: "../../scripts/linux/commons/userdata-ol9.sh"

    # INSTALL SALT MASTER AND MINIONS
    managment.vm.provision "shell", name: "[SCRIPT: scripts/linux/salt/install.sh]", path: "../../scripts/linux/salt/install.sh"
  end
end
